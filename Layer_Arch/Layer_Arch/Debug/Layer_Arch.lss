
Layer_Arch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  0000035e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd3  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086a  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061b  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060f  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a5  00000000  00000000  00002a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  7a:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <int_>:
/*D4*/	 {output,STD_low},
/*D5*/	 {output,STD_low},
/*D6*/	 {output,STD_low},
/*D7*/	 {output,STD_low},
	};
	void int_(){
  82:	e0 e6       	ldi	r30, 0x60	; 96
  84:	f0 e0       	ldi	r31, 0x00	; 0
		uint_8 counter,pin_channel,port_channel;
		for (counter=dio_channel_A0;counter<pincount;counter++)
  86:	80 e0       	ldi	r24, 0x00	; 0
				switch(port_channel){
				case dio_PORTA:
					CLEAR_BIT(DDRA_REG,pin_channel);
					break;	
				case dio_PORTB:
					CLEAR_BIT(DDRB_REG,pin_channel);
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	50 e0       	ldi	r21, 0x00	; 0
	};
	void int_(){
		uint_8 counter,pin_channel,port_channel;
		for (counter=dio_channel_A0;counter<pincount;counter++)
		{
			pin_channel=counter%8;
  8c:	38 2f       	mov	r19, r24
  8e:	37 70       	andi	r19, 0x07	; 7
			port_channel=counter/8;
  90:	98 2f       	mov	r25, r24
  92:	96 95       	lsr	r25
  94:	96 95       	lsr	r25
  96:	96 95       	lsr	r25
			if(dio_pin_config[counter].pindir==output)
  98:	20 81       	ld	r18, Z
  9a:	21 30       	cpi	r18, 0x01	; 1
  9c:	a1 f5       	brne	.+104    	; 0x106 <int_+0x84>
			{
				switch(port_channel)
  9e:	91 30       	cpi	r25, 0x01	; 1
  a0:	89 f0       	breq	.+34     	; 0xc4 <int_+0x42>
  a2:	28 f0       	brcs	.+10     	; 0xae <int_+0x2c>
  a4:	92 30       	cpi	r25, 0x02	; 2
  a6:	c9 f0       	breq	.+50     	; 0xda <int_+0x58>
  a8:	93 30       	cpi	r25, 0x03	; 3
  aa:	11 f1       	breq	.+68     	; 0xf0 <int_+0x6e>
  ac:	63 c0       	rjmp	.+198    	; 0x174 <int_+0xf2>
				{
					case dio_PORTA:
						SET_BIT(DDRA_REG,pin_channel);
  ae:	9a b3       	in	r25, 0x1a	; 26
  b0:	ba 01       	movw	r22, r20
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <int_+0x36>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	3a 95       	dec	r19
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <int_+0x32>
  bc:	9b 01       	movw	r18, r22
  be:	29 2b       	or	r18, r25
  c0:	2a bb       	out	0x1a, r18	; 26
						break;
  c2:	58 c0       	rjmp	.+176    	; 0x174 <int_+0xf2>
					case dio_PORTB:
						SET_BIT(DDRB_REG,pin_channel);
  c4:	97 b3       	in	r25, 0x17	; 23
  c6:	ba 01       	movw	r22, r20
  c8:	02 c0       	rjmp	.+4      	; 0xce <int_+0x4c>
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	3a 95       	dec	r19
  d0:	e2 f7       	brpl	.-8      	; 0xca <int_+0x48>
  d2:	9b 01       	movw	r18, r22
  d4:	29 2b       	or	r18, r25
  d6:	27 bb       	out	0x17, r18	; 23
						break;
  d8:	4d c0       	rjmp	.+154    	; 0x174 <int_+0xf2>
					case dio_PORTC:
						SET_BIT(DDRC_REG,pin_channel);
  da:	94 b3       	in	r25, 0x14	; 20
  dc:	ba 01       	movw	r22, r20
  de:	02 c0       	rjmp	.+4      	; 0xe4 <int_+0x62>
  e0:	66 0f       	add	r22, r22
  e2:	77 1f       	adc	r23, r23
  e4:	3a 95       	dec	r19
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <int_+0x5e>
  e8:	9b 01       	movw	r18, r22
  ea:	29 2b       	or	r18, r25
  ec:	24 bb       	out	0x14, r18	; 20
						break;
  ee:	42 c0       	rjmp	.+132    	; 0x174 <int_+0xf2>
					case dio_PORTD:
						SET_BIT(DDRD_REG,pin_channel);
  f0:	91 b3       	in	r25, 0x11	; 17
  f2:	ba 01       	movw	r22, r20
  f4:	02 c0       	rjmp	.+4      	; 0xfa <int_+0x78>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	3a 95       	dec	r19
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <int_+0x74>
  fe:	9b 01       	movw	r18, r22
 100:	29 2b       	or	r18, r25
 102:	21 bb       	out	0x11, r18	; 17
						break;
 104:	37 c0       	rjmp	.+110    	; 0x174 <int_+0xf2>
				}
			}
			else{
				switch(port_channel){
 106:	91 30       	cpi	r25, 0x01	; 1
 108:	91 f0       	breq	.+36     	; 0x12e <int_+0xac>
 10a:	28 f0       	brcs	.+10     	; 0x116 <int_+0x94>
 10c:	92 30       	cpi	r25, 0x02	; 2
 10e:	d9 f0       	breq	.+54     	; 0x146 <int_+0xc4>
 110:	93 30       	cpi	r25, 0x03	; 3
 112:	29 f1       	breq	.+74     	; 0x15e <int_+0xdc>
 114:	2f c0       	rjmp	.+94     	; 0x174 <int_+0xf2>
				case dio_PORTA:
					CLEAR_BIT(DDRA_REG,pin_channel);
 116:	2a b3       	in	r18, 0x1a	; 26
 118:	ba 01       	movw	r22, r20
 11a:	02 c0       	rjmp	.+4      	; 0x120 <int_+0x9e>
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	3a 95       	dec	r19
 122:	e2 f7       	brpl	.-8      	; 0x11c <int_+0x9a>
 124:	96 2f       	mov	r25, r22
 126:	90 95       	com	r25
 128:	92 23       	and	r25, r18
 12a:	9a bb       	out	0x1a, r25	; 26
					break;	
 12c:	23 c0       	rjmp	.+70     	; 0x174 <int_+0xf2>
				case dio_PORTB:
					CLEAR_BIT(DDRB_REG,pin_channel);
 12e:	27 b3       	in	r18, 0x17	; 23
 130:	ba 01       	movw	r22, r20
 132:	02 c0       	rjmp	.+4      	; 0x138 <int_+0xb6>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	3a 95       	dec	r19
 13a:	e2 f7       	brpl	.-8      	; 0x134 <int_+0xb2>
 13c:	96 2f       	mov	r25, r22
 13e:	90 95       	com	r25
 140:	92 23       	and	r25, r18
 142:	97 bb       	out	0x17, r25	; 23
					break;
 144:	17 c0       	rjmp	.+46     	; 0x174 <int_+0xf2>
				case dio_PORTC:
					CLEAR_BIT(DDRC_REG,pin_channel);
 146:	24 b3       	in	r18, 0x14	; 20
 148:	ba 01       	movw	r22, r20
 14a:	02 c0       	rjmp	.+4      	; 0x150 <int_+0xce>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	3a 95       	dec	r19
 152:	e2 f7       	brpl	.-8      	; 0x14c <int_+0xca>
 154:	96 2f       	mov	r25, r22
 156:	90 95       	com	r25
 158:	92 23       	and	r25, r18
 15a:	94 bb       	out	0x14, r25	; 20
					break;
 15c:	0b c0       	rjmp	.+22     	; 0x174 <int_+0xf2>
				case  dio_PORTD:
					CLEAR_BIT(DDRD_REG,pin_channel);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	ba 01       	movw	r22, r20
 162:	02 c0       	rjmp	.+4      	; 0x168 <int_+0xe6>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	3a 95       	dec	r19
 16a:	e2 f7       	brpl	.-8      	; 0x164 <int_+0xe2>
 16c:	96 2f       	mov	r25, r22
 16e:	90 95       	com	r25
 170:	92 23       	and	r25, r18
 172:	91 bb       	out	0x11, r25	; 17
/*D6*/	 {output,STD_low},
/*D7*/	 {output,STD_low},
	};
	void int_(){
		uint_8 counter,pin_channel,port_channel;
		for (counter=dio_channel_A0;counter<pincount;counter++)
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	32 96       	adiw	r30, 0x02	; 2
 178:	80 32       	cpi	r24, 0x20	; 32
 17a:	09 f0       	breq	.+2      	; 0x17e <int_+0xfc>
 17c:	87 cf       	rjmp	.-242    	; 0x8c <int_+0xa>
					CLEAR_BIT(DDRD_REG,pin_channel);
					break;
				}
			}
			}
 17e:	08 95       	ret

00000180 <comand_lcd>:
#include "std_types.h"
#include "dio_types.h"
void comand_lcd(dio_channelType en,dio_channelType rs,uint_8 cmd){
	dio_channelType RS=rs%8;
	dio_channelType EN=en%8;
	PORTA_REG=(PORTA_REG & 0x0F)|(cmd & 0xF0);
 180:	9b b3       	in	r25, 0x1b	; 27
 182:	9f 70       	andi	r25, 0x0F	; 15
 184:	24 2f       	mov	r18, r20
 186:	20 7f       	andi	r18, 0xF0	; 240
 188:	92 2b       	or	r25, r18
 18a:	9b bb       	out	0x1b, r25	; 27
	CLEAR_BIT(PORTB_REG,RS);
 18c:	98 b3       	in	r25, 0x18	; 24
 18e:	67 70       	andi	r22, 0x07	; 7
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <comand_lcd+0x1c>
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <comand_lcd+0x18>
 1a0:	bf 01       	movw	r22, r30
 1a2:	60 95       	com	r22
 1a4:	96 23       	and	r25, r22
 1a6:	98 bb       	out	0x18, r25	; 24
	SET_BIT(PORTB_REG,EN);
 1a8:	58 b3       	in	r21, 0x18	; 24
 1aa:	87 70       	andi	r24, 0x07	; 7
 1ac:	f9 01       	movw	r30, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <comand_lcd+0x34>
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <comand_lcd+0x30>
 1b8:	cf 01       	movw	r24, r30
 1ba:	5e 2b       	or	r21, r30
 1bc:	58 bb       	out	0x18, r21	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	ef e1       	ldi	r30, 0x1F	; 31
 1c0:	fe e4       	ldi	r31, 0x4E	; 78
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <comand_lcd+0x42>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <comand_lcd+0x48>
 1c8:	00 00       	nop
	_delay_ms(5);
	CLEAR_BIT(PORTB_REG,EN);
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	98 2f       	mov	r25, r24
 1ce:	90 95       	com	r25
 1d0:	29 23       	and	r18, r25
 1d2:	28 bb       	out	0x18, r18	; 24
 1d4:	ef e3       	ldi	r30, 0x3F	; 63
 1d6:	ff e1       	ldi	r31, 0x1F	; 31
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <comand_lcd+0x58>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <comand_lcd+0x5e>
 1de:	00 00       	nop
	_delay_ms(2);
	PORTA_REG=(PORTA_REG & 0x0F)|(cmd << 4);
 1e0:	2b b3       	in	r18, 0x1b	; 27
 1e2:	2f 70       	andi	r18, 0x0F	; 15
 1e4:	f0 e1       	ldi	r31, 0x10	; 16
 1e6:	4f 9f       	mul	r20, r31
 1e8:	a0 01       	movw	r20, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	42 2b       	or	r20, r18
 1ee:	4b bb       	out	0x1b, r20	; 27
	CLEAR_BIT(PORTB_REG,RS);
 1f0:	28 b3       	in	r18, 0x18	; 24
 1f2:	62 23       	and	r22, r18
 1f4:	68 bb       	out	0x18, r22	; 24
	SET_BIT(PORTB_REG,EN);
 1f6:	28 b3       	in	r18, 0x18	; 24
 1f8:	82 2b       	or	r24, r18
 1fa:	88 bb       	out	0x18, r24	; 24
 1fc:	ef e1       	ldi	r30, 0x1F	; 31
 1fe:	fe e4       	ldi	r31, 0x4E	; 78
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <comand_lcd+0x80>
 204:	00 c0       	rjmp	.+0      	; 0x206 <comand_lcd+0x86>
 206:	00 00       	nop
	_delay_ms(5);
	CLEAR_BIT(PORTB_REG,EN);
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	98 23       	and	r25, r24
 20c:	98 bb       	out	0x18, r25	; 24
 20e:	8f e3       	ldi	r24, 0x3F	; 63
 210:	9f e1       	ldi	r25, 0x1F	; 31
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <comand_lcd+0x92>
 216:	00 c0       	rjmp	.+0      	; 0x218 <comand_lcd+0x98>
 218:	00 00       	nop
 21a:	08 95       	ret

0000021c <write_lcd>:
	_delay_ms(2);
	}
void write_lcd(dio_channelType en,dio_channelType rs,uint_8 data){
	dio_channelType RS=rs%8;
	dio_channelType EN=en%8;
	PORTA_REG=(PORTA_REG & 0x0F)|(data & 0xF0);
 21c:	9b b3       	in	r25, 0x1b	; 27
 21e:	9f 70       	andi	r25, 0x0F	; 15
 220:	24 2f       	mov	r18, r20
 222:	20 7f       	andi	r18, 0xF0	; 240
 224:	92 2b       	or	r25, r18
 226:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(PORTB_REG,RS);
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	67 70       	andi	r22, 0x07	; 7
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <write_lcd+0x1c>
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <write_lcd+0x18>
 23c:	bf 01       	movw	r22, r30
 23e:	9e 2b       	or	r25, r30
 240:	98 bb       	out	0x18, r25	; 24
	SET_BIT(PORTB_REG,EN);
 242:	58 b3       	in	r21, 0x18	; 24
 244:	87 70       	andi	r24, 0x07	; 7
 246:	f9 01       	movw	r30, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <write_lcd+0x32>
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	8a 95       	dec	r24
 250:	e2 f7       	brpl	.-8      	; 0x24a <write_lcd+0x2e>
 252:	cf 01       	movw	r24, r30
 254:	5e 2b       	or	r21, r30
 256:	58 bb       	out	0x18, r21	; 24
 258:	ef e1       	ldi	r30, 0x1F	; 31
 25a:	fe e4       	ldi	r31, 0x4E	; 78
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <write_lcd+0x40>
 260:	00 c0       	rjmp	.+0      	; 0x262 <write_lcd+0x46>
 262:	00 00       	nop
	_delay_ms(5);
	CLEAR_BIT(PORTB_REG,EN);
 264:	28 b3       	in	r18, 0x18	; 24
 266:	98 2f       	mov	r25, r24
 268:	90 95       	com	r25
 26a:	29 23       	and	r18, r25
 26c:	28 bb       	out	0x18, r18	; 24
 26e:	ef e3       	ldi	r30, 0x3F	; 63
 270:	ff e1       	ldi	r31, 0x1F	; 31
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <write_lcd+0x56>
 276:	00 c0       	rjmp	.+0      	; 0x278 <write_lcd+0x5c>
 278:	00 00       	nop
	_delay_ms(2);
	PORTA_REG=(PORTA_REG & 0x0F)|(data << 4);
 27a:	2b b3       	in	r18, 0x1b	; 27
 27c:	2f 70       	andi	r18, 0x0F	; 15
 27e:	f0 e1       	ldi	r31, 0x10	; 16
 280:	4f 9f       	mul	r20, r31
 282:	a0 01       	movw	r20, r0
 284:	11 24       	eor	r1, r1
 286:	42 2b       	or	r20, r18
 288:	4b bb       	out	0x1b, r20	; 27
	SET_BIT(PORTB_REG,RS);
 28a:	28 b3       	in	r18, 0x18	; 24
 28c:	62 2b       	or	r22, r18
 28e:	68 bb       	out	0x18, r22	; 24
	SET_BIT(PORTB_REG,EN);
 290:	28 b3       	in	r18, 0x18	; 24
 292:	82 2b       	or	r24, r18
 294:	88 bb       	out	0x18, r24	; 24
 296:	ef e1       	ldi	r30, 0x1F	; 31
 298:	fe e4       	ldi	r31, 0x4E	; 78
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <write_lcd+0x7e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <write_lcd+0x84>
 2a0:	00 00       	nop
	_delay_ms(5);
	CLEAR_BIT(PORTB_REG,EN);
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	98 23       	and	r25, r24
 2a6:	98 bb       	out	0x18, r25	; 24
 2a8:	8f e3       	ldi	r24, 0x3F	; 63
 2aa:	9f e1       	ldi	r25, 0x1F	; 31
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <write_lcd+0x90>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <write_lcd+0x96>
 2b2:	00 00       	nop
 2b4:	08 95       	ret

000002b6 <string_lcd>:
	_delay_ms(2);
	}
void string_lcd(char *str){
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
	uint_8 i=0;
	while(*str!='\0')
 2bc:	fc 01       	movw	r30, r24
 2be:	20 81       	ld	r18, Z
 2c0:	22 23       	and	r18, r18
 2c2:	79 f0       	breq	.+30     	; 0x2e2 <string_lcd+0x2c>
 2c4:	8c 01       	movw	r16, r24
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		write_lcd(dio_channel_B3,dio_channel_B1,str[i]);
 2c8:	f8 01       	movw	r30, r16
 2ca:	ec 0f       	add	r30, r28
 2cc:	f1 1d       	adc	r31, r1
 2ce:	40 81       	ld	r20, Z
 2d0:	69 e0       	ldi	r22, 0x09	; 9
 2d2:	8b e0       	ldi	r24, 0x0B	; 11
 2d4:	0e 94 0e 01 	call	0x21c	; 0x21c <write_lcd>
		i++;
 2d8:	cf 5f       	subi	r28, 0xFF	; 255
	CLEAR_BIT(PORTB_REG,EN);
	_delay_ms(2);
	}
void string_lcd(char *str){
	uint_8 i=0;
	while(*str!='\0')
 2da:	f8 01       	movw	r30, r16
 2dc:	80 81       	ld	r24, Z
 2de:	81 11       	cpse	r24, r1
 2e0:	f3 cf       	rjmp	.-26     	; 0x2c8 <string_lcd+0x12>
		i++;
	}
	
	
	
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <int_lcd>:
#include "dio_types.h"
#include "dio_config.h"
#include "lcd.h"
#include "util\delay.h"
void int_lcd(){
	int_();
 2ea:	0e 94 41 00 	call	0x82	; 0x82 <int_>
	CLEAR_BIT(DDRB_REG,3);
 2ee:	bb 98       	cbi	0x17, 3	; 23
 2f0:	87 e8       	ldi	r24, 0x87	; 135
 2f2:	93 e1       	ldi	r25, 0x13	; 19
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <int_lcd+0xa>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <int_lcd+0x10>
 2fa:	00 00       	nop
	_delay_ms(20);
    comand_lcd(dio_channel_B3,dio_channel_B1,0x33);
 2fc:	43 e3       	ldi	r20, 0x33	; 51
 2fe:	69 e0       	ldi	r22, 0x09	; 9
 300:	8b e0       	ldi	r24, 0x0B	; 11
 302:	0e 94 c0 00 	call	0x180	; 0x180 <comand_lcd>
	comand_lcd(dio_channel_B3,dio_channel_B1,0x32);
 306:	42 e3       	ldi	r20, 0x32	; 50
 308:	69 e0       	ldi	r22, 0x09	; 9
 30a:	8b e0       	ldi	r24, 0x0B	; 11
 30c:	0e 94 c0 00 	call	0x180	; 0x180 <comand_lcd>
	comand_lcd(dio_channel_B3,dio_channel_B1,0x28);
 310:	48 e2       	ldi	r20, 0x28	; 40
 312:	69 e0       	ldi	r22, 0x09	; 9
 314:	8b e0       	ldi	r24, 0x0B	; 11
 316:	0e 94 c0 00 	call	0x180	; 0x180 <comand_lcd>
	comand_lcd(dio_channel_B3,dio_channel_B1,0x0c);
 31a:	4c e0       	ldi	r20, 0x0C	; 12
 31c:	69 e0       	ldi	r22, 0x09	; 9
 31e:	8b e0       	ldi	r24, 0x0B	; 11
 320:	0e 94 c0 00 	call	0x180	; 0x180 <comand_lcd>
	comand_lcd(dio_channel_B3,dio_channel_B1,0x06);
 324:	46 e0       	ldi	r20, 0x06	; 6
 326:	69 e0       	ldi	r22, 0x09	; 9
 328:	8b e0       	ldi	r24, 0x0B	; 11
 32a:	0e 94 c0 00 	call	0x180	; 0x180 <comand_lcd>
	comand_lcd(dio_channel_B3,dio_channel_B1,0x01);
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	69 e0       	ldi	r22, 0x09	; 9
 332:	8b e0       	ldi	r24, 0x0B	; 11
 334:	0e 94 c0 00 	call	0x180	; 0x180 <comand_lcd>
 338:	08 95       	ret

0000033a <main>:
#include "dio.h"
#include "lcd.h"
#include "std_types.h"
int main(void)
{
    int_lcd();
 33a:	0e 94 75 01 	call	0x2ea	; 0x2ea <int_lcd>
    while (1) 
    {
		string_lcd("hello");
 33e:	80 ea       	ldi	r24, 0xA0	; 160
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <string_lcd>
		comand_lcd(dio_channel_B3,dio_channel_B1,0xc0);
 346:	40 ec       	ldi	r20, 0xC0	; 192
 348:	69 e0       	ldi	r22, 0x09	; 9
 34a:	8b e0       	ldi	r24, 0x0B	; 11
 34c:	0e 94 c0 00 	call	0x180	; 0x180 <comand_lcd>
		string_lcd("AHMED");
 350:	86 ea       	ldi	r24, 0xA6	; 166
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <string_lcd>
 358:	f2 cf       	rjmp	.-28     	; 0x33e <main+0x4>

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
